using System;
using CoreGraphics;
using Foundation;
using ObjCRuntime;
using UIKit;

namespace Facebook.LoginKit
{
    // @interface FBSDKDeviceLoginCodeInfo : NSObject
    [BaseType(typeof(NSObject), Name = "FBSDKDeviceLoginCodeInfo")]
    [DisableDefaultCtor]
    interface DeviceLoginCodeInfo
    {
        // @property (readonly, copy, nonatomic) NSString * _Nonnull identifier;
        [Export("identifier")] string Identifier { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nonnull loginCode;
        [Export("loginCode")] string LoginCode { get; }

        // @property (readonly, copy, nonatomic) NSURL * _Nonnull verificationURL;
        [Export("verificationURL", ArgumentSemantic.Copy)]
        NSUrl VerificationUrl { get; }

        // @property (readonly, copy, nonatomic) NSDate * _Nonnull expirationDate;
        [Export("expirationDate", ArgumentSemantic.Copy)]
        NSDate ExpirationDate { get; }

        // @property (readonly, assign, nonatomic) NSUInteger pollingInterval;
        [Export("pollingInterval")] nuint PollingInterval { get; }
    }

    interface IDeviceLoginManagerDelegate
    {
    }

    // @protocol FBSDKDeviceLoginManagerDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject), Name = "FBSDKDeviceLoginManagerDelegate")]
    interface DeviceLoginManagerDelegate
    {
        // @required -(void)deviceLoginManager:(FBSDKDeviceLoginManager * _Nonnull)loginManager startedWithCodeInfo:(FBSDKDeviceLoginCodeInfo * _Nonnull)codeInfo;
        [Abstract]
        [EventArgs("DeviceLoginManagerStarted")]
        [Export("deviceLoginManager:startedWithCodeInfo:")]
        void Started(DeviceLoginManager loginManager, DeviceLoginCodeInfo codeInfo);

        // @required -(void)deviceLoginManager:(FBSDKDeviceLoginManager * _Nonnull)loginManager completedWithResult:(FBSDKDeviceLoginManagerResult * _Nullable)result error:(NSError * _Nullable)error;
        [Abstract]
        [EventArgs("DeviceLoginManagerCompleted")]
        [Export("deviceLoginManager:completedWithResult:error:")]
        void Completed(DeviceLoginManager loginManager, [NullAllowed] DeviceLoginManagerResult result, [NullAllowed] NSError error);
    }

    // @interface FBSDKDeviceLoginManager : NSObject <NSNetServiceDelegate>
    [BaseType(typeof(NSObject),
        Name = "FBSDKDeviceLoginManager",
        Delegates = new[] { "Delegate" },
        Events = new[] { typeof(DeviceLoginManagerDelegate) })]
    [DisableDefaultCtor]
    interface DeviceLoginManager : INSNetServiceDelegate
    {
        // -(instancetype _Nonnull)initWithPermissions:(NSArray<NSString *> * _Nonnull)permissions enableSmartLogin:(BOOL)enableSmartLogin __attribute__((objc_designated_initializer));
        [Export("initWithPermissions:enableSmartLogin:")]
        [DesignatedInitializer]
        IntPtr Constructor(string[] permissions, bool enableSmartLogin);

        [Wrap("WeakDelegate")] [NullAllowed] IDeviceLoginManagerDelegate Delegate { get; set; }

        // @property (nonatomic, weak) id<FBSDKDeviceLoginManagerDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
        NSObject WeakDelegate { get; set; }

        // @property (readonly, copy, nonatomic) NSArray<NSString *> * _Nonnull permissions;
        [Export("permissions", ArgumentSemantic.Copy)]
        string[] Permissions { get; }

        // @property (copy, nonatomic) NSURL * _Nullable redirectURL;
        [NullAllowed, Export("redirectURL", ArgumentSemantic.Copy)]
        NSUrl RedirectUrl { get; set; }

        // -(void)start;
        [Export("start")]
        void Start();

        // -(void)cancel;
        [Export("cancel")]
        void Cancel();
    }

    // @interface FBSDKDeviceLoginManagerResult : NSObject
    [BaseType(typeof(NSObject), Name = "FBSDKDeviceLoginManagerResult")]
    [DisableDefaultCtor]
    interface DeviceLoginManagerResult
    {
        // @property (readonly, nonatomic, strong) FBSDKAccessToken * _Nullable accessToken;
        [NullAllowed, Export("accessToken", ArgumentSemantic.Strong)]
        CoreKit.AccessToken AccessToken { get; }

        // @property (readonly, getter = isCancelled, assign, nonatomic) BOOL cancelled;
        [Export("cancelled")] bool IsCancelled { [Bind("isCancelled")] get; }
    }

    // @interface FBSDKLoginButton : FBSDKButton
    [BaseType(typeof(CoreKit.Button),
        Name = "FBSDKLoginButton",
        Delegates = new[] { "Delegate" },
        Events = new[] { typeof(LoginButtonDelegate) })]
    interface LoginButton
    {
        [Export ("initWithFrame:")]
        IntPtr Constructor (CGRect frame);

        // extern NS_SWIFT_NAME(LoginErrorDomain) const NSErrorDomain FBSDKLoginErrorDomain __attribute__((swift_name("LoginErrorDomain")));
        [Field("FBSDKLoginErrorDomain", "__Internal")]
        NSString ErrorDomain { get; }

        // @property (assign, nonatomic) FBSDKDefaultAudience defaultAudience;
        [Export("defaultAudience", ArgumentSemantic.Assign)]
        DefaultAudience DefaultAudience { get; set; }

        [Wrap("WeakDelegate")] [NullAllowed] LoginButtonDelegate Delegate { get; set; }

        // @property (nonatomic, weak) id<FBSDKLoginButtonDelegate> _Nullable delegate __attribute__((iboutlet));
        [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
        NSObject WeakDelegate { get; set; }

        // @property (copy, nonatomic) NSArray<NSString *> * _Nonnull permissions;
        [Export("permissions", ArgumentSemantic.Copy)]
        string[] Permissions { get; set; }

        // @property (assign, nonatomic) FBSDKLoginButtonTooltipBehavior tooltipBehavior;
        [Export("tooltipBehavior", ArgumentSemantic.Assign)]
        LoginButtonTooltipBehavior TooltipBehavior { get; set; }

        // @property (assign, nonatomic) FBSDKTooltipColorStyle tooltipColorStyle;
        [Export("tooltipColorStyle", ArgumentSemantic.Assign)]
        TooltipColorStyle TooltipColorStyle { get; set; }

        // @property (assign, nonatomic) FBSDKLoginTracking loginTracking;
        [Export("loginTracking", ArgumentSemantic.Assign)]
        LoginTracking LoginTracking { get; set; }

        // @property (copy, nonatomic) NSString * _Nullable nonce;
        [NullAllowed, Export("nonce")] string Nonce { get; set; }
    }

    // @protocol FBSDKLoginButtonDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject), Name = "FBSDKLoginButtonDelegate")]
    interface LoginButtonDelegate
    {
        // @required -(void)loginButton:(FBSDKLoginButton * _Nonnull)loginButton didCompleteWithResult:(FBSDKLoginManagerLoginResult * _Nullable)result error:(NSError * _Nullable)error;
        [Abstract]
        [EventArgs("LoginButtonCompleted")]
        [EventName("Completed")]
        [Export("loginButton:didCompleteWithResult:error:")]
        void DidComplete(LoginButton loginButton, [NullAllowed] LoginManagerLoginResult result, [NullAllowed] NSError error);

        // @required -(void)loginButtonDidLogOut:(FBSDKLoginButton * _Nonnull)loginButton;
        [Abstract]
        [EventArgs("LoginButtonLoggedOut")]
        [EventName("LoggedOut")]
        [Export("loginButtonDidLogOut:")]
        void DidLogOut(LoginButton loginButton);

        // @optional -(BOOL)loginButtonWillLogin:(FBSDKLoginButton * _Nonnull)loginButton;
        [DelegateName("LoginButtonWillLogin")]
        [DefaultValue(true)]
        [Export("loginButtonWillLogin:")]
        bool WillLogin(LoginButton loginButton);
    }

    // typedef void (^FBSDKLoginManagerLoginResultBlock)(FBSDKLoginManagerLoginResult * _Nullable, NSError * _Nullable);
    delegate void LoginManagerLoginResultBlockHandler([NullAllowed] LoginManagerLoginResult result, [NullAllowed] NSError error);

    // @interface FBSDKLoginManager : NSObject
    [BaseType(typeof(NSObject), Name = "FBSDKLoginManager")]
    interface LoginManager
    {
        // @property (nonatomic, strong) FBSDKLoginAuthType _Nonnull authType;
        [Export("authType", ArgumentSemantic.Strong)]
        string AuthType { get; set; }

        // @property (assign, nonatomic) FBSDKDefaultAudience defaultAudience;
        [Export("defaultAudience", ArgumentSemantic.Assign)]
        DefaultAudience DefaultAudience { get; set; }

        // -(void)logInWithPermissions:(NSArray<NSString *> * _Nonnull)permissions fromViewController:(UIViewController * _Nullable)fromViewController handler:(FBSDKLoginManagerLoginResultBlock _Nullable)handler __attribute__((swift_name("logIn(permissions:from:handler:)")));
        [Export("logInWithPermissions:fromViewController:handler:")]
        void LogInWithPermissions(string[] permissions, [NullAllowed] UIViewController fromViewController, [NullAllowed] LoginManagerLoginResultBlockHandler handler);

        // -(void)logInFromViewController:(UIViewController * _Nullable)viewController configuration:(FBSDKLoginConfiguration * _Nonnull)configuration completion:(FBSDKLoginManagerLoginResultBlock _Nonnull)completion __attribute__((swift_private));
        [Export("logInFromViewController:configuration:completion:")]
        void LogInFromViewController([NullAllowed] UIViewController viewController, LoginConfiguration configuration, LoginManagerLoginResultBlockHandler completion);

        // -(void)logInWithURL:(NSURL * _Nonnull)url handler:(FBSDKLoginManagerLoginResultBlock _Nullable)handler __attribute__((swift_name("logIn(url:handler:)")));
        [Export("logInWithURL:handler:")]
        void LogInWithUrl(NSUrl url, [NullAllowed] LoginManagerLoginResultBlockHandler handler);

        // -(void)reauthorizeDataAccess:(UIViewController * _Nonnull)fromViewController handler:(FBSDKLoginManagerLoginResultBlock _Nonnull)handler __attribute__((swift_name("reauthorizeDataAccess(from:handler:)")));
        [Export("reauthorizeDataAccess:handler:")]
        void ReauthorizeDataAccess(UIViewController fromViewController, LoginManagerLoginResultBlockHandler handler);

        // -(void)logOut;
        [Export("logOut")]
        void LogOut();
    }

    // @interface FBSDKLoginManagerLoginResult : NSObject
    [BaseType(typeof(NSObject), Name = "FBSDKLoginManagerLoginResult")]
    [DisableDefaultCtor]
    interface LoginManagerLoginResult
    {
        // @property (copy, nonatomic) FBSDKAccessToken * _Nullable token;
        [NullAllowed, Export("token", ArgumentSemantic.Copy)]
        CoreKit.AccessToken Token { get; set; }

        // @property (copy, nonatomic) FBSDKAuthenticationToken * _Nullable authenticationToken;
        [NullAllowed, Export("authenticationToken", ArgumentSemantic.Copy)]
        CoreKit.AuthenticationToken AuthenticationToken { get; set; }

        // @property (readonly, nonatomic) BOOL isCancelled;
        [Export("isCancelled")] bool IsCancelled { get; }

        // @property (copy, nonatomic) NSSet<NSString *> * _Nonnull grantedPermissions;
        [Export("grantedPermissions", ArgumentSemantic.Copy)]
        NSSet<NSString> GrantedPermissions { get; set; }

        // @property (copy, nonatomic) NSSet<NSString *> * _Nonnull declinedPermissions;
        [Export("declinedPermissions", ArgumentSemantic.Copy)]
        NSSet<NSString> DeclinedPermissions { get; set; }

        // -(instancetype _Nonnull)initWithToken:(FBSDKAccessToken * _Nullable)token authenticationToken:(FBSDKAuthenticationToken * _Nullable)authenticationToken isCancelled:(BOOL)isCancelled grantedPermissions:(NSSet<NSString *> * _Nonnull)grantedPermissions declinedPermissions:(NSSet<NSString *> * _Nonnull)declinedPermissions __attribute__((objc_designated_initializer));
        [Export("initWithToken:authenticationToken:isCancelled:grantedPermissions:declinedPermissions:")]
        [DesignatedInitializer]
        IntPtr Constructor([NullAllowed] CoreKit.AccessToken token, [NullAllowed] CoreKit.AuthenticationToken authenticationToken, bool isCancelled, NSSet<NSString> grantedPermissions, NSSet<NSString> declinedPermissions);
    }

    // @interface FBSDKLoginTooltipView : FBSDKTooltipView
    [BaseType(typeof(TooltipView),
        Name = "FBSDKLoginTooltipView",
        Delegates = new[] { "Delegate" },
        Events = new[] { typeof(LoginTooltipViewDelegate) })]
    interface LoginTooltipView
    {
        [Wrap("WeakDelegate")] [NullAllowed] ILoginTooltipViewDelegate Delegate { get; set; }

        // @property (nonatomic, weak) id<FBSDKLoginTooltipViewDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
        NSObject WeakDelegate { get; set; }

        // @property (getter = shouldForceDisplay, assign, nonatomic) BOOL forceDisplay;
        [Export("forceDisplay")] bool ForceDisplay { [Bind("shouldForceDisplay")] get; set; }
    }

    interface ILoginTooltipViewDelegate
    {
    }

    // @protocol FBSDKLoginTooltipViewDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject), Name = "FBSDKLoginTooltipViewDelegate")]
    interface LoginTooltipViewDelegate
    {
        // @optional -(BOOL)loginTooltipView:(FBSDKLoginTooltipView * _Nonnull)view shouldAppear:(BOOL)appIsEligible;
        [DelegateName("LoginTooltipViewShouldAppear")]
        [DefaultValue(true)]
        [Export("loginTooltipView:shouldAppear:")]
        bool ShouldAppear(LoginTooltipView view, bool appIsEligible);

        // @optional -(void)loginTooltipViewWillAppear:(FBSDKLoginTooltipView * _Nonnull)view;
        [EventArgs("LoginTooltipViewWillAppear")]
        [Export("loginTooltipViewWillAppear:")]
        void WillAppear(LoginTooltipView view);

        // @optional -(void)loginTooltipViewWillNotAppear:(FBSDKLoginTooltipView * _Nonnull)view;
        [EventArgs("LoginTooltipViewWillNotAppear")]
        [Export("loginTooltipViewWillNotAppear:")]
        void WillNotAppear(LoginTooltipView view);
    }

    // @interface FBSDKTooltipView : UIView
    [BaseType(typeof(UIView), Name = "FBSDKTooltipView")]
    interface TooltipView
    {
        // @property (assign, nonatomic) CFTimeInterval displayDuration;
        [Export("displayDuration")] double DisplayDuration { get; set; }

        // @property (assign, nonatomic) FBSDKTooltipColorStyle colorStyle;
        [Export("colorStyle", ArgumentSemantic.Assign)]
        TooltipColorStyle ColorStyle { get; set; }

        // @property (copy, nonatomic) NSString * _Nullable message;
        [NullAllowed, Export("message")] string Message { get; set; }

        // @property (copy, nonatomic) NSString * _Nullable tagline;
        [NullAllowed, Export("tagline")] string Tagline { get; set; }

        // -(instancetype _Nonnull)initWithTagline:(NSString * _Nullable)tagline message:(NSString * _Nullable)message colorStyle:(FBSDKTooltipColorStyle)colorStyle;
        [Export("initWithTagline:message:colorStyle:")]
        IntPtr Constructor([NullAllowed] string tagline, [NullAllowed] string message, TooltipColorStyle colorStyle);

        // -(void)presentFromView:(UIView * _Nonnull)anchorView;
        [Export("presentFromView:")]
        void PresentFromView(UIView anchorView);

        // -(void)presentInView:(UIView * _Nonnull)view withArrowPosition:(CGPoint)arrowPosition direction:(FBSDKTooltipViewArrowDirection)arrowDirection __attribute__((swift_name("present(in:arrowPosition:direction:)")));
        [Export("presentInView:withArrowPosition:direction:")]
        void PresentInView(UIView view, CGPoint arrowPosition, TooltipViewArrowDirection arrowDirection);

        // -(void)dismiss;
        [Export("dismiss")]
        void Dismiss();
    }

    // @interface FBSDKLoginConfiguration : NSObject
    [BaseType(typeof(NSObject), Name = "FBSDKLoginConfiguration")]
    [DisableDefaultCtor]
    interface LoginConfiguration
    {
        // @property (readonly, copy, nonatomic) NSString * _Nonnull nonce;
        [Export("nonce")] string Nonce { get; }

        // @property (readonly, nonatomic) FBSDKLoginTracking tracking;
        [Export("tracking")] LoginTracking Tracking { get; }

        // @property (readonly, copy, nonatomic) NSSet<FBSDKPermission *> * _Nonnull requestedPermissions;
        [Export("requestedPermissions", ArgumentSemantic.Copy)]
        NSSet<NSString> RequestedPermissions { get; }

        // -(instancetype _Nullable)initWithPermissions:(NSArray<NSString *> * _Nonnull)permissions tracking:(FBSDKLoginTracking)tracking nonce:(NSString * _Nonnull)nonce __attribute__((swift_private));
        [Export("initWithPermissions:tracking:nonce:")]
        IntPtr Constructor(string[] permissions, LoginTracking tracking, string nonce);

        // -(instancetype _Nullable)initWithPermissions:(NSArray<NSString *> * _Nonnull)permissions tracking:(FBSDKLoginTracking)tracking __attribute__((swift_private));
        [Export("initWithPermissions:tracking:")]
        IntPtr Constructor(string[] permissions, LoginTracking tracking);

        // -(instancetype _Nullable)initWithTracking:(FBSDKLoginTracking)tracking __attribute__((swift_private));
        [Export("initWithTracking:")]
        IntPtr Constructor(LoginTracking tracking);
    }

    // typedef void (^FBSDKReferralManagerResultBlock)(FBSDKReferralManagerResult * _Nullable, NSError * _Nullable);
    delegate void ReferralManagerResultBlockHandler([NullAllowed] ReferralManagerResult arg0, [NullAllowed] NSError arg1);

    // @interface FBSDKReferralManager : NSObject
    [BaseType(typeof(NSObject), Name = "FBSDKReferralManager")]
    interface ReferralManager
    {
        // -(instancetype _Nonnull)initWithViewController:(UIViewController * _Nullable)viewController;
        [Export("initWithViewController:")]
        IntPtr Constructor([NullAllowed] UIViewController viewController);

        // -(void)startReferralWithCompletionHandler:(FBSDKReferralManagerResultBlock _Nullable)handler;
        [Export("startReferralWithCompletionHandler:")]
        void StartReferralWithCompletionHandler([NullAllowed] ReferralManagerResultBlockHandler handler);
    }

    // @interface FBSDKReferralCode : NSObject
    [BaseType(typeof(NSObject), Name = "FBSDKReferralCode")]
    [DisableDefaultCtor]
    interface ReferralCode
    {
        // @property NSString * _Nonnull value;
        [Export("value")] string Value { get; set; }

        // +(instancetype _Nullable)initWithString:(NSString * _Nonnull)string;
        [Static]
        [Export("initWithString:")]
        [return: NullAllowed]
        ReferralCode Init(string @string);
    }

    // @interface FBSDKReferralManagerResult : NSObject
    [BaseType(typeof(NSObject), Name = "FBSDKReferralManagerResult")]
    [DisableDefaultCtor]
    interface ReferralManagerResult
    {
        // @property (readonly, nonatomic) BOOL isCancelled;
        [Export("isCancelled")] bool IsCancelled { get; }

        // @property (copy, nonatomic) NSArray<FBSDKReferralCode *> * _Nonnull referralCodes;
        [Export("referralCodes", ArgumentSemantic.Copy)]
        ReferralCode[] ReferralCodes { get; set; }

        // -(instancetype _Nonnull)initWithReferralCodes:(NSArray<FBSDKReferralCode *> * _Nullable)referralCodes isCancelled:(BOOL)isCancelled __attribute__((objc_designated_initializer));
        [Export("initWithReferralCodes:isCancelled:")]
        [DesignatedInitializer]
        IntPtr Constructor([NullAllowed] ReferralCode[] referralCodes, bool isCancelled);
    }

    [Static]
    partial interface LoginKitVersionConstants
    {
        // extern double FBSDKLoginKitVersionNumber;
        [Field("FBSDKLoginKitVersionNumber", "__Internal")]
        double VersionNumber { get; }

        // extern const unsigned char [] FBSDKLoginKitVersionString;
        [Field("FBSDKLoginKitVersionString", "__Internal")]
        NSString VersionString { get; }
    }
}
